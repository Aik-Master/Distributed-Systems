package gcd.Starter;


/**
* gcd/Starter/StarterPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from distributed-algorithm.idl
* Dienstag, 19. Mai 2015 08:38 Uhr MESZ
*/

public abstract class StarterPOA extends org.omg.PortableServer.Servant
 implements gcd.Starter.StarterOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getId", new java.lang.Integer (0));
    _methods.put ("startGcdProcesses", new java.lang.Integer (1));
    _methods.put ("endGcdProcesses", new java.lang.Integer (2));
    _methods.put ("processFinished", new java.lang.Integer (3));
    _methods.put ("shutDown", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /*
              * Liefert die ID des Starters.
              */
       case 0:  // gcd/Starter/Starter/getId
       {
         String $result = null;
         $result = this.getId ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /*
              * Startet die uebergebene Anzahl an GgT-Prozessen
              */
       case 1:  // gcd/Starter/Starter/startGcdProcesses
       {
         int anzahl = in.read_long ();
         this.startGcdProcesses (anzahl);
         out = $rh.createReply();
         break;
       }


  /*
              * Beendet alle GgT-Prozesse
              */
       case 2:  // gcd/Starter/Starter/endGcdProcesses
       {
         this.endGcdProcesses ();
         out = $rh.createReply();
         break;
       }


  /*
              * Meldet dem Starter die endg√ºltige beendigung eines Prozesses
              */
       case 3:  // gcd/Starter/Starter/processFinished
       {
         this.processFinished ();
         out = $rh.createReply();
         break;
       }


  /*
              * Beendet den Starter und alle GgT-Prozesse
              */
       case 4:  // gcd/Starter/Starter/shutDown
       {
         this.shutDown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:gcd/Starter/Starter:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Starter _this() 
  {
    return StarterHelper.narrow(
    super._this_object());
  }

  public Starter _this(org.omg.CORBA.ORB orb) 
  {
    return StarterHelper.narrow(
    super._this_object(orb));
  }


} // class StarterPOA
