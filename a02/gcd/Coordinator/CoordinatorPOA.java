package gcd.Coordinator;


/**
* gcd/Coordinator/CoordinatorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from distributed-algorithm.idl
* Dienstag, 19. Mai 2015 08:38 Uhr MESZ
*/

public abstract class CoordinatorPOA extends org.omg.PortableServer.Servant
 implements gcd.Coordinator.CoordinatorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getAllStarters", new java.lang.Integer (0));
    _methods.put ("isBusy", new java.lang.Integer (1));
    _methods.put ("calculateGcd", new java.lang.Integer (2));
    _methods.put ("calculationComplete", new java.lang.Integer (3));
    _methods.put ("registerStarter", new java.lang.Integer (4));
    _methods.put ("registerGcdProcess", new java.lang.Integer (5));
    _methods.put ("shutDown", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /*
              * Liefert eine Liste mit allen Startern zurueck.
              */
       case 0:  // gcd/Coordinator/Coordinator/getAllStarters
       {
         gcd.Starter.Starter $result[] = null;
         $result = this.getAllStarters ();
         out = $rh.createReply();
         gcd.Coordinator.StarterListHelper.write (out, $result);
         break;
       }


  /*
              * Meldet false wenn der Koordinator neue Auftraege annehmen kann
              */
       case 1:  // gcd/Coordinator/Coordinator/isBusy
       {
         boolean $result = false;
         $result = this.isBusy ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /*
              * Startet die Berechnung der
              */
       case 2:  // gcd/Coordinator/Coordinator/calculateGcd
       {
         int minNoProcesses = in.read_long ();
         int maxNoProcesses = in.read_long ();
         int minDelay = in.read_long ();
         int maxDelay = in.read_long ();
         int tTimeout = in.read_long ();
         int gcd = in.read_long ();
         this.calculateGcd (minNoProcesses, maxNoProcesses, minDelay, maxDelay, tTimeout, gcd);
         out = $rh.createReply();
         break;
       }


  /*
              * Schickt das Ergebnis der Rechnung an den Koordinator
              */
       case 3:  // gcd/Coordinator/Coordinator/calculationComplete
       {
         boolean complete = in.read_boolean ();
         int result = in.read_long ();
         String processID = in.read_string ();
         int seq = in.read_long ();
         this.calculationComplete (complete, result, processID, seq);
         out = $rh.createReply();
         break;
       }


  /*
              * Meldet einen Starter beim Koordinator an.
              */
       case 4:  // gcd/Coordinator/Coordinator/registerStarter
       {
         gcd.Starter.Starter starter = gcd.Starter.StarterHelper.read (in);
         this.registerStarter (starter);
         out = $rh.createReply();
         break;
       }


  /*
              * Meldet einen ggt-Prozess beim Koordinator an.
              */
       case 5:  // gcd/Coordinator/Coordinator/registerGcdProcess
       {
         gcd.Starter.GcdProcess process = gcd.Starter.GcdProcessHelper.read (in);
         this.registerGcdProcess (process);
         out = $rh.createReply();
         break;
       }


  /*
              * Faehrt das System runter.
              */
       case 6:  // gcd/Coordinator/Coordinator/shutDown
       {
         this.shutDown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:gcd/Coordinator/Coordinator:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Coordinator _this() 
  {
    return CoordinatorHelper.narrow(
    super._this_object());
  }

  public Coordinator _this(org.omg.CORBA.ORB orb) 
  {
    return CoordinatorHelper.narrow(
    super._this_object(orb));
  }


} // class CoordinatorPOA
