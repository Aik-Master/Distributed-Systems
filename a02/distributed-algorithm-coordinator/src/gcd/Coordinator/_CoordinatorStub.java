package gcd.Coordinator;


/**
* gcd/Coordinator/_CoordinatorStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from distributed-algorithm.idl
* Dienstag, 19. Mai 2015 08:38 Uhr MESZ
*/

public class _CoordinatorStub extends org.omg.CORBA.portable.ObjectImpl implements gcd.Coordinator.Coordinator
{


  /*
              * Liefert eine Liste mit allen Startern zurueck.
              */
  public gcd.Starter.Starter[] getAllStarters ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAllStarters", true);
                $in = _invoke ($out);
                gcd.Starter.Starter $result[] = gcd.Coordinator.StarterListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAllStarters (        );
            } finally {
                _releaseReply ($in);
            }
  } // getAllStarters


  /*
              * Meldet false wenn der Koordinator neue Auftraege annehmen kann
              */
  public boolean isBusy ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isBusy", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isBusy (        );
            } finally {
                _releaseReply ($in);
            }
  } // isBusy


  /*
              * Startet die Berechnung der
              */
  public void calculateGcd (int minNoProcesses, int maxNoProcesses, int minDelay, int maxDelay, int tTimeout, int gcd)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("calculateGcd", true);
                $out.write_long (minNoProcesses);
                $out.write_long (maxNoProcesses);
                $out.write_long (minDelay);
                $out.write_long (maxDelay);
                $out.write_long (tTimeout);
                $out.write_long (gcd);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                calculateGcd (minNoProcesses, maxNoProcesses, minDelay, maxDelay, tTimeout, gcd        );
            } finally {
                _releaseReply ($in);
            }
  } // calculateGcd


  /*
              * Schickt das Ergebnis der Rechnung an den Koordinator
              */
  public void calculationComplete (boolean complete, int result, String processID, int seq)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("calculationComplete", true);
                $out.write_boolean (complete);
                $out.write_long (result);
                $out.write_string (processID);
                $out.write_long (seq);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                calculationComplete (complete, result, processID, seq        );
            } finally {
                _releaseReply ($in);
            }
  } // calculationComplete


  /*
              * Meldet einen Starter beim Koordinator an.
              */
  public void registerStarter (gcd.Starter.Starter starter)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("registerStarter", true);
                gcd.Starter.StarterHelper.write ($out, starter);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                registerStarter (starter        );
            } finally {
                _releaseReply ($in);
            }
  } // registerStarter


  /*
              * Meldet einen ggt-Prozess beim Koordinator an.
              */
  public void registerGcdProcess (gcd.Starter.GcdProcess process)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("registerGcdProcess", true);
                gcd.Starter.GcdProcessHelper.write ($out, process);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                registerGcdProcess (process        );
            } finally {
                _releaseReply ($in);
            }
  } // registerGcdProcess


  /*
              * Faehrt das System runter.
              */
  public void shutDown ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("shutDown", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                shutDown (        );
            } finally {
                _releaseReply ($in);
            }
  } // shutDown

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:gcd/Coordinator/Coordinator:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _CoordinatorStub
