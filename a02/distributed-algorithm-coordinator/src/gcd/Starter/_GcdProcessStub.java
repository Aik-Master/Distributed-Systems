package gcd.Starter;


/**
* gcd/Starter/_GcdProcessStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from distributed-algorithm.idl
* Dienstag, 19. Mai 2015 08:38 Uhr MESZ
*/

public class _GcdProcessStub extends org.omg.CORBA.portable.ObjectImpl implements gcd.Starter.GcdProcess
{


  /*
              * Initialisiert den ggT-Prozess
              */
  public void initGcdProcess (gcd.Starter.GcdProcess rightNeighbour, gcd.Starter.GcdProcess leftNeighbour, int startvalue, int delay, monitor.Monitor gcdMonitor)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("initGcdProcess", true);
                gcd.Starter.GcdProcessHelper.write ($out, rightNeighbour);
                gcd.Starter.GcdProcessHelper.write ($out, leftNeighbour);
                $out.write_long (startvalue);
                $out.write_long (delay);
                monitor.MonitorHelper.write ($out, gcdMonitor);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                initGcdProcess (rightNeighbour, leftNeighbour, startvalue, delay, gcdMonitor        );
            } finally {
                _releaseReply ($in);
            }
  } // initGcdProcess


  /*
              * Liefert den Namen des Prozesses.
              */
  public String getName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getName (        );
            } finally {
                _releaseReply ($in);
            }
  } // getName


  /*
              * Liefert den aktuellen Wert des Prozesses.
              */
  public int getNumber ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getNumber", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getNumber (        );
            } finally {
                _releaseReply ($in);
            }
  } // getNumber


  /*
              * Empfaengt BerechnugsAuftrag vom Koordinator
              */
  public void startGcdAlgorithm ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startGcdAlgorithm", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startGcdAlgorithm (        );
            } finally {
                _releaseReply ($in);
            }
  } // startGcdAlgorithm


  /*
              * Empfaengt BerechnugsAuftrag vom Nachbarn
              */
  public void calculateMsg (String sender, int value)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("calculateMsg", true);
                $out.write_string (sender);
                $out.write_long (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                calculateMsg (sender, value        );
            } finally {
                _releaseReply ($in);
            }
  } // calculateMsg


  /*
              * Empfaengt TerminierungsAuftrag vom Nachbarn
              */
  public void terminateGcdCalculation (String sender, int value)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("terminateGcdCalculation", true);
                $out.write_string (sender);
                $out.write_long (value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                terminateGcdCalculation (sender, value        );
            } finally {
                _releaseReply ($in);
            }
  } // terminateGcdCalculation

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:gcd/Starter/GcdProcess:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _GcdProcessStub
