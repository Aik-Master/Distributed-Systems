package gcd.Starter;


/**
* gcd/Starter/GcdProcessPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from distributed-algorithm.idl
* Dienstag, 19. Mai 2015 08:38 Uhr MESZ
*/

public abstract class GcdProcessPOA extends org.omg.PortableServer.Servant
 implements gcd.Starter.GcdProcessOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("initGcdProcess", new java.lang.Integer (0));
    _methods.put ("getName", new java.lang.Integer (1));
    _methods.put ("getNumber", new java.lang.Integer (2));
    _methods.put ("startGcdAlgorithm", new java.lang.Integer (3));
    _methods.put ("calculateMsg", new java.lang.Integer (4));
    _methods.put ("terminateGcdCalculation", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /*
              * Initialisiert den ggT-Prozess
              */
       case 0:  // gcd/Starter/GcdProcess/initGcdProcess
       {
         gcd.Starter.GcdProcess rightNeighbour = gcd.Starter.GcdProcessHelper.read (in);
         gcd.Starter.GcdProcess leftNeighbour = gcd.Starter.GcdProcessHelper.read (in);
         int startvalue = in.read_long ();
         int delay = in.read_long ();
         monitor.Monitor gcdMonitor = monitor.MonitorHelper.read (in);
         this.initGcdProcess (rightNeighbour, leftNeighbour, startvalue, delay, gcdMonitor);
         out = $rh.createReply();
         break;
       }


  /*
              * Liefert den Namen des Prozesses.
              */
       case 1:  // gcd/Starter/GcdProcess/getName
       {
         String $result = null;
         $result = this.getName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /*
              * Liefert den aktuellen Wert des Prozesses.
              */
       case 2:  // gcd/Starter/GcdProcess/getNumber
       {
         int $result = (int)0;
         $result = this.getNumber ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }


  /*
              * Empfaengt BerechnugsAuftrag vom Koordinator
              */
       case 3:  // gcd/Starter/GcdProcess/startGcdAlgorithm
       {
         this.startGcdAlgorithm ();
         out = $rh.createReply();
         break;
       }


  /*
              * Empfaengt BerechnugsAuftrag vom Nachbarn
              */
       case 4:  // gcd/Starter/GcdProcess/calculateMsg
       {
         String sender = in.read_string ();
         int value = in.read_long ();
         this.calculateMsg (sender, value);
         out = $rh.createReply();
         break;
       }


  /*
              * Empfaengt TerminierungsAuftrag vom Nachbarn
              */
       case 5:  // gcd/Starter/GcdProcess/terminateGcdCalculation
       {
         String sender = in.read_string ();
         int value = in.read_long ();
         this.terminateGcdCalculation (sender, value);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:gcd/Starter/GcdProcess:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public GcdProcess _this() 
  {
    return GcdProcessHelper.narrow(
    super._this_object());
  }

  public GcdProcess _this(org.omg.CORBA.ORB orb) 
  {
    return GcdProcessHelper.narrow(
    super._this_object(orb));
  }


} // class GcdProcessPOA
