/////////////////////////////////////
// idl fuer Projekt GgT-Berechnung
// Version 1.00 vom 14.5.15
// Gruppe: Addo/Klostermann
/////////////////////////////////////

module monitor{

    typedef sequence<string> ProzessIds;
    typedef sequence<long> Startzahlen;

    interface Monitor {
        /*
        * Bekanntgabe der Ringzusammensetzung.
        * Ring wird als String-Array uebergeben.
        * In dem Array sind die IDs der beteiligten Prozesse anzugeben.
        * Die Ids sollen sich zusammensetzen aus dem Namen des Starters
        * und einer vom Starter vergebenen fortlaufenden Nummer.
        */
        void ring( in ProzessIds prozessIds );

        /*
        * Bekanntgabe der Startzahlen der beteiligten Prozesse.
        * Zahlen werden in einem Integer-Array uebergeben.
        * Laenge des Startzahlen-Arrays muss mit der Laenge des Prozessids-Arrays uebereinstimmen.
        */
            void startzahlen( in Startzahlen startzahlen );

        /*
        * Mitteilung an den Monitor, dass von einem Prozess eine neue Zahl empfangen wurde.
        * Mitteilung soll auch gesendet werden, wenn die Zahl vom Prozess nicht bearbeitet wurde,
        * weil sie zu gross war.
        * Parameter enthalten die Angaben, welcher Prozess die Zahl empfangen hat, von welchem
        * Prozess sie gesendet wurde und welche Zahl uebertragen wurde.
        */
            void rechnen( in string prozessId, in string prozessIdAbsender, in long num );


        /*
        * Mitteilung an den Monitor, dass von einem Prozess eine Terminierungsanfrage empfangen wurde.
        * Parameter enthalten die Angaben, welcher Prozess die Anfrage empfangen hat, von wem sie
        * urspruenglich gesendet wurde und ob terminiert werden soll.
        */
        void terminieren( in string prozessId, in string prozessIdAbsender, in boolean terminiere );

        /*
        * Mit diesem Aufruf soll der Koordinator das Ergebnis seiner Berechnung an den
        * Monitor uebergeben.
        */
        void ergebnis( in string prozessId, in long num );
    };
};

module gcd {

    module Starter{

        interface GcdProcess {

            /*
            * Initialisiert den ggT-Prozess
            */
            void initGcdProcess(in GcdProcess rightNeighbour, in GcdProcess leftNeighbour, in long startvalue, in long delay, in monitor::Monitor gcdMonitor);

            /*
            * Liefert den Namen des Prozesses.
            */
            string getName();

            /*
            * Liefert den aktuellen Wert des Prozesses.
            */
            long getNumber();

            /*
            * Empfaengt BerechnugsAuftrag vom Koordinator
            */
            void startGcdAlgorithm();

            /*
            * Empfaengt BerechnugsAuftrag vom Nachbarn
            */
            void calculateMsg(in string sender, in long value);

            /*
            * Empfaengt TerminierungsAuftrag vom Nachbarn
            */
            void terminateGcdCalculation(in string sender, in long value);

        };


        interface Starter {
            /*
            * Liefert die ID des Starters.
            */
            string getId();

            /*
            * Startet die uebergebene Anzahl an GgT-Prozessen
            */
            void startGcdProcesses(in long anzahl);

            /*
            * Beendet alle GgT-Prozesse
            */
            void endGcdProcesses();

            /*
            * Meldet dem Starter die endg√ºltige beendigung eines Prozesses
            */
            void processFinished();

            /*
            * Beendet den Starter und alle GgT-Prozesse
            */
            void shutDown();
        };
    };



    module Coordinator{

    	typedef sequence<Starter::Starter> StarterList;

        interface Coordinator {
            /*
            * Liefert eine Liste mit allen Startern zurueck.
            */
            StarterList getAllStarters();

            /*
            * Meldet false wenn der Koordinator neue Auftraege annehmen kann
            */
            boolean isBusy();

            /*
            * Startet die Berechnung der
            */
            void calculateGcd(in long minNoProcesses, in long maxNoProcesses, in long minDelay, in long maxDelay, in long tTimeout, in long gcd);

            /*
            * Schickt das Ergebnis der Rechnung an den Koordinator
            */
            void calculationComplete(in boolean complete, in long result, in  string processID, in long seq);

            /*
            * Meldet einen Starter beim Koordinator an.
            */
            void registerStarter(in Starter::Starter starter);

            /*
            * Meldet einen ggt-Prozess beim Koordinator an.
            */
            void registerGcdProcess(in Starter::GcdProcess process);

            /*
            * Faehrt das System runter.
            */
            void shutDown();

        };
    };

};
