
package hawmetering;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import net.java.dev.jaxb.array.StringArray;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "HAWSensorWebservice", targetNamespace = "http://hawmetering/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    hawmetering.ObjectFactory.class,
    net.java.dev.jaxb.array.ObjectFactory.class
})
public interface HAWSensorWebservice {


    /**
     * 
     */
    @WebMethod
    @Action(input = "http://hawmetering/HAWSensorWebservice/triggerRequest", output = "http://hawmetering/HAWSensorWebservice/triggerResponse")
    public void trigger();

    /**
     * 
     */
    @WebMethod
    @Action(input = "http://hawmetering/HAWSensorWebservice/electionRequest", output = "http://hawmetering/HAWSensorWebservice/electionResponse")
    public void election();

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @Action(input = "http://hawmetering/HAWSensorWebservice/newCoordinatorRequest", output = "http://hawmetering/HAWSensorWebservice/newCoordinatorResponse")
    public void newCoordinator(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://hawmetering/HAWSensorWebservice/isElectionRunningRequest", output = "http://hawmetering/HAWSensorWebservice/isElectionRunningResponse")
    public boolean isElectionRunning();

    /**
     * 
     * @param sensorUrlMap
     */
    @WebMethod
    @Action(input = "http://hawmetering/HAWSensorWebservice/refreshSensorsRequest", output = "http://hawmetering/HAWSensorWebservice/refreshSensorsResponse")
    public void refreshSensors(
        @WebParam(name = "sensorUrlMap", partName = "sensorUrlMap")
        StringArray sensorUrlMap);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://hawmetering/HAWSensorWebservice/getCoordinatorUrlRequest", output = "http://hawmetering/HAWSensorWebservice/getCoordinatorUrlResponse")
    public String getCoordinatorUrl();

    /**
     * 
     * @param hawMeteringChart
     * @param hawMeteringURL
     * @throws Exception_Exception
     */
    @WebMethod
    @Action(input = "http://hawmetering/HAWSensorWebservice/registerSensorRequest", output = "http://hawmetering/HAWSensorWebservice/registerSensorResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://hawmetering/HAWSensorWebservice/registerSensor/Fault/Exception")
    })
    public void registerSensor(
        @WebParam(name = "hawMeteringURL", partName = "hawMeteringURL")
        String hawMeteringURL,
        @WebParam(name = "hawMeteringChart", partName = "hawMeteringChart")
        String hawMeteringChart)
        throws Exception_Exception
    ;

}
